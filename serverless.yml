service: expense-tracker

provider:
  name: aws
  runtime: nodejs18.x
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-2'}
  environment:
    EXPENSES_TABLE: ${self:service}-expenses-${self:provider.stage}
    USER_POOL_ID: !Ref CognitoUserPool
    USER_POOL_CLIENT_ID: !Ref CognitoUserPoolClient
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: !GetAtt ExpensesTable.Arn
    - Effect: Allow
      Action:
        - logs:CreateLogGroup
        - logs:CreateLogStream
        - logs:PutLogEvents
      Resource: "*"

package:
  individually: true
  patterns:
    - "!node_modules/**"
    - "!frontend/**"
    - "!.git/**"
    - "!.github/**"
    - "!.vscode/**"
    - "!*.md"
    - "!*.yml"
    - "!*.json"
    - "!webpack.*"

functions:
  # API Functions
  createExpense:
    handler: backend/functions/expenses/create.handler
    package:
      patterns:
        - "backend/functions/expenses/create.js"
        - "backend/shared/**"  # Include any shared code if it exists
    events:
      - http:
          path: expenses
          method: post
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: !Ref ApiGatewayAuthorizer
  
  listExpenses:
    handler: backend/functions/expenses/list.handler
    package:
      patterns:
        - "backend/functions/expenses/list.js"
        - "backend/shared/**"  # Include any shared code if it exists
    events:
      - http:
          path: expenses
          method: get
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: !Ref ApiGatewayAuthorizer
  
  getExpense:
    handler: backend/functions/expenses/get.handler
    package:
      patterns:
        - "backend/functions/expenses/get.js"
        - "backend/shared/**"  # Include any shared code if it exists
    events:
      - http:
          path: expenses/{id}
          method: get
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: !Ref ApiGatewayAuthorizer
  
  updateExpense:
    handler: backend/functions/expenses/update.handler
    package:
      patterns:
        - "backend/functions/expenses/update.js"
        - "backend/shared/**"  # Include any shared code if it exists
    events:
      - http:
          path: expenses/{id}
          method: put
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: !Ref ApiGatewayAuthorizer
  
  deleteExpense:
    handler: backend/functions/expenses/delete.handler
    package:
      patterns:
        - "backend/functions/expenses/delete.js"
        - "backend/shared/**"  # Include any shared code if it exists
    events:
      - http:
          path: expenses/{id}
          method: delete
          cors: true
          authorizer:
            type: COGNITO_USER_POOLS
            authorizerId: !Ref ApiGatewayAuthorizer

resources:
  Resources:
    # DynamoDB Table
    ExpensesTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.environment.EXPENSES_TABLE}
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: expenseId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: expenseId
            KeyType: RANGE

    # Cognito User Pool
    CognitoUserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: ${self:service}-user-pool-${self:provider.stage}
        AutoVerifiedAttributes:
          - email
        UsernameAttributes:
          - email
        Policies:
          PasswordPolicy:
            MinimumLength: 8
            RequireLowercase: true
            RequireNumbers: true
            RequireSymbols: false
            RequireUppercase: true

    # Cognito User Pool Client
    CognitoUserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        ClientName: ${self:service}-client-${self:provider.stage}
        UserPoolId: !Ref CognitoUserPool
        ExplicitAuthFlows:
          - ALLOW_USER_SRP_AUTH
          - ALLOW_REFRESH_TOKEN_AUTH
        GenerateSecret: false

    # API Gateway Authorizer
    ApiGatewayAuthorizer:
      Type: AWS::ApiGateway::Authorizer
      Properties:
        Name: cognito-authorizer
        IdentitySource: method.request.header.Authorization
        RestApiId: !Ref ApiGatewayRestApi
        Type: COGNITO_USER_POOLS
        ProviderARNs:
          - !GetAtt CognitoUserPool.Arn
    

  Outputs:
    ApiUrl:
      Description: URL of the API Gateway endpoint
      Value: !Sub https://${ApiGatewayRestApi}.execute-api.${AWS::Region}.amazonaws.com/${self:provider.stage}
    UserPoolId:
      Description: ID of the Cognito User Pool
      Value: !Ref CognitoUserPool
    UserPoolClientId:
      Description: ID of the Cognito User Pool Client
      Value: !Ref CognitoUserPoolClient

plugins:
  - serverless-s3-sync

# Configure S3 sync for frontend deployment
custom:
  s3Sync:
    - bucketName: expense-tracker-frontend-prod
      localDir: frontend/build